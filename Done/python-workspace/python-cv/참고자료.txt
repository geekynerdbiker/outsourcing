쓰면 안되는 함수
cv2.KAZE_create()
approxPolyDP
cv2.estimateAffinePartial2D
cv2.connectedComponentsWithStats 
cv2.dilate

필수로 들어가야하는 코드 (이미지 입력)
from tkinter import *
from tkinter import filedialog
import cv2

root = Tk()
path = filedialog.askopenfilename(initialdir = "C:/Users/wjddm/testimage/Sample_images/A. Stitching", filetypes = (("jpeg files", "*.jpg"), ("all files", "*.*")))
img1 = cv2.imread(path)
root.withdraw()

root = Tk()
path = filedialog.askopenfilename(initialdir ="C:/Users/wjddm/testimage/Sample_images/A. Stitching", filetypes = (("jpeg files", "*.jpg"), ("all files", "*.*")))
img2 = cv2.imread(path)
root.withdraw()

베이스 코드
import numpy as np
import cv2
from matplotlib import pyplot as plt

MIN_MATCH_COUNT = 4

img1 = cv2.imread('View8.PNG', 0)  # queryImage
img2 = cv2.imread('View9.PNG', 0)  # trainImage

# Initiate SIFT detector
sift = cv2.SIFT_create()

# find the keypoints and descriptors with SIFT
kp1, des1 = sift.detectAndCompute(img1, None)
kp2, des2 = sift.detectAndCompute(img2, None)

FLANN_INDEX_KDTREE = 0
index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)  # (key=value)
search_params = dict(checks=50)
flann = cv2.FlannBasedMatcher(index_params, search_params)
matches = flann.knnMatch(des1, des2, k=2)

# store all the good matches as per Lowe's ratio test.
good = []
for m, n in matches:
    if m.distance < 0.2 * n.distance:
        good.append(m)

if len(good) > MIN_MATCH_COUNT:
    src_pts = np.float32([kp1[m.queryIdx].pt for m in good]).reshape(-1, 1, 2)  # -1: auto size
    dst_pts = np.float32([kp2[m.trainIdx].pt for m in good]).reshape(-1, 1, 2)
    M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
    matchesMask = mask.ravel().tolist()

    h, w = img1.shape
    pts = np.float32([[0, 0], [0, h - 1], [w - 1, h - 1], [w - 1, 0]]).reshape(-1, 1, 2)
    dst = cv2.perspectiveTransform(pts, M)
    img2 = cv2.polylines(img2, [np.int32(dst)], True, 255, 3, cv2.LINE_AA)
else:
    print("Not enough matches are found -%d/%d".format(len(good), MIN_MATCH_COUNT))
    matchesMask = None

draw_params = dict(matchColor=(0, 255, 0),  # draw matches in green color
                   singlePointColor=None,
                   matchesMask=matchesMask,  # draw only inliers
                   flags=2)

img3 = cv2.drawMatches(img1, kp1, img2, kp2, good, None, **draw_params)

plt.imshow(img3, 'gray')
plt.show()

#img1 : (오른쪽뷰), img2 : (왼쪽뷰)
width = img2.shape[1] + img1.shape[1]
height = img2.shape[0] + img1.shape[0]
dst = cv2.warpPerspective(img1, M, (width,height))
cv2. imshow("Warping right to left", dst), plt.show()
dst[0:img2.shape[0], 0:img2.shape [1]] = img2
cv2. imshow ("Stiching", dst), plt.show()
cv2.waitKey(0)
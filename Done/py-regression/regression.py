# -*- coding: utf-8 -*-
"""insurance.csv_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vU1FxJczY8w-JVExPJ8AUwlQQT6meCXt
"""

#Necessary imports:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

factory_metadata_csv="/content/data/factory_metadata.csv"
weather_info_csv="/content/data/weather_info.csv"
train_csv="/content/data/train.csv"

factory_metadata = pd.read_csv(factory_metadata_csv)
factory_metadata.info() 

weather_info = pd.read_csv(weather_info_csv)
weather_info.info()

train = pd.read_csv(train_csv)
train.info()

data = pd.merge(factory_metadata, weather_info, how='right')
data = pd.merge(data, train, how='left')
data.info()

data = data.drop(['timestamp'], axis = 1)
data.isnull()
data = data.dropna()

second = data['target']
print(second.shape)

# Independent 
first = data.drop(['target'], axis = 1)
print(first.shape)
print(first.columns)

from sklearn.model_selection import train_test_split

first_train, first_test, second_train, second_test = train_test_split(first, second, test_size=0.2, random_state=0)

print('Size of first_train = ', first_train.shape)
print('Size of first_test  = ', first_test.shape)
print('Size of second_train = ', second_train.shape)
print('Size of second_test  = ', second_test.shape)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

first_train = sc.fit_transform(first_train)
first_test = sc.transform(first_test)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(first_train, second_train)

second_predict = model.predict(first_test)

print(second_predict)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

linreg = LinearRegression()
linreg.fit(first_train, second_train)

linreg_pred = linreg.predict(first_test)

mse = mean_squared_error(second_test, linreg_pred)
rmse = np.sqrt(mse)
r2 = r2_score(second_test, linreg_pred)

print("Root Mean Squared Error : ",rmse)
print("r2Squared :", r2)
print(r2*100,"% accurate")
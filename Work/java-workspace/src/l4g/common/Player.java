package l4g.common;

import l4g.data.CellInfo;
import l4g.data.PlayerInfo;
import l4g.data.TurnInfo;

/**
 * L4G 게임에 참여할 플레이어 한 명을 나타내는 클래스입니다.<br>
 * <br>
 * Note: 이 클래스 정의에 적혀 있는 필드 선언 / 메서드 정의들은 여러분이 자주 구경하게 될 중요한 것들입니다.
 * 여러분의 플레이어를 구성하기 전에 <code>Player.java</code>를 열어 내용을 확인해 보는 것이 좋습니다.
 * 
 * @author Racin
 *
 */
public abstract class Player
{
	/* ----------------------------------------------------------------------
	 * 필드 선언 부분 - 꼭 읽어 보세요!
	 */
	
	/**
	 * 이 플레이어의 일련 번호입니다.
	 * 
	 * 게임에 참여하는 모든 플레이어는 서로 다른 일련 번호를 가집니다.
	 * 이 필드는 읽기 전용입니다.
	 */
	public final int ID;

	/**
	 * 이 플레이어의 이름입니다.
	 * 
	 * 이름은 주로 점수판과 같이 '사람한테 보여주기 위한' 곳에서 사용되며,
	 * 여러분 코드에서 이 필드를 직접 사용할 일은 거의 없을 것입니다.
	 * 이 필드는 읽기 전용입니다.
	 */
	public final String name;

	/**
	 * '직접 감염' 수락 여부를 설정하는 필드입니다.
	 * 
	 * 여러분이 이 필드의 값을 true로 설정해 두면
	 * 이 플레이어가 직접 감염을 수락한 것으로 간주되며
	 * 강의실 안에 있는 모든 플레이어가 생존자 상태로 존재하는 턴(직접 감염이 시작되는 턴)에
	 * 감염 인자를 받게 됩니다.
	 */
	public boolean trigger_acceptDirectInfection;

	/**
	 * 현재 진행되는 게임의 번호입니다.
	 * 이 필드의 내용은 게임이 시작될 때 강의실 측에서 자동으로 담아 주니 여러분은 그냥 읽기만 하면 됩니다.<br>
	 * <br>
	 * <b>주의:</b> L4G는 '실제 여러분의 학점에 반영되는' 프로젝트입니다.
	 * 따라서 모든 게임은 '재연 가능'해야 합니다.
	 * 쉽게 말하면, 같은 플레이어 조합으로 같은 게임 번호를 써서 돌리면 항상 똑같은 결과가 나와야 합니다.
	 * 이를 해칠 수 있는 요소들(<code>new Random()</code>같은거)을 사용하면
	 * 강사가 <font face="궁서체" color="red" size=3>몹시 슬퍼</font>할 예정이니 꼭 참아 주세요!
	 */
	public long gameNumber;
	
	/**
	 * 게임 전반에 대한 각종 정보들을 확인할 수 있는 필드입니다.
	 * 이 필드의 내용은 매 턴마다 강의실 측에서 자동으로 갱신해 주니 여러분은 그냥 읽기만 하면 됩니다.
	 */
	public TurnInfo turnInfo;

	/**
	 * 이 플레이어의 현재 상태를 확인할 수 있는 필드입니다.
	 * 이 필드의 내용은 매 턴마다 강의실 측에서 자동으로 갱신해 주니 여러분은 그냥 읽기만 하면 됩니다.
	 */
	public PlayerInfo myInfo;
	
	/**
	 * 이 플레이어의 현재 점수를 확인할 수 있는 필드입니다.
	 * 이 필드의 내용은 매 턴마다 강의실 측에서 자동으로 갱신해 주니 여러분은 그냥 읽기만 하면 됩니다.
	 * 이 필드 자체(내부 데이터 말고 <code>Score</code> 인스턴스 자체)는 읽기 전용입니다
	 * (여러분이 직접 이 필드에 새로운 인스턴스를 할당할 수는 없습니다).
	 */
	public final Score myScore;
	
	/**
	 * 강의실의 각 칸에 대한 정보들을 확인할 수 있는 배열입니다.
	 * 이 배열의 내용은 의사 결정 메서드를 호출받을 때마다 강의실 측에서 자동으로 갱신해 주니
	 * 여러분은 그냥 읽기만 하면 됩니다.
	 * 
	 * 게임 내 대부분의 정보는 각 칸에 기록되므로, 아마 여러분은 이 필드를 가장 많이 사용하게 될 것입니다.
	 * 배열 자체는 강의실 크기에 맞게 미리 생성되어 있으므로
	 * 여러분은 <code>cells[3][2]</code>와 같이 [ ] 연산자로 배열 내의 칸 하나하나를 살펴볼 수 있습니다.<br>
	 * <br>
	 * <b>Note:</b> <code>cells[3][2]</code>는 위에서 네 번째, 왼쪽에서 세 번째 칸을 나타냅니다.
	 * 맨 왼쪽 맨 위는 <code>cells[0][0]</code>이고, 두 [ ] 중 안쪽(왼쪽)이 세로 방향을 담당합니다.
	 */
	public final CellInfo[][] cells;

	public Player(int ID, String name)
	{
		this.ID = ID;
		this.name = name;
		
		myScore = new Score();
		cells = new CellInfo[Constants.Classroom_Height][Constants.Classroom_Width];
	}

	/* ----------------------------------------------------------------------
	 * 의사 결정 메서드 선언 부분
	 */

	/**
	 * 생존자 상태일 때 이번 턴에 어느 방향으로 이동할 지 선택하여 return합니다.
	 * 이 메서드는 여러분이 작성해야 할 다섯 가지 의사 결정 메서드들 중 하나입니다.<br>
	 * <br>
	 * <b>주의:</b> 생존자가 DirectionCode.Stay를 return하는 경우 부정 이동에 해당하므로 패널티를 받게 됩니다.
	 */
	public abstract DirectionCode Survivor_Move();

	/**
	 * 시체 상태일 때 이번 턴에 그냥 가만히 누워 있습니다.
	 * 시체 상태에서도 자신이 누워 있는 칸에 누가 있는지, 누가 날 먹고 있는지 정도는 파악할 수 있으니
	 * 이 메서드에 약간의 지능을 추가할 학생도 어쩌면 존재할 지도 모릅니다.
	 * 이 메서드는 여러분이 작성해야 할 다섯 가지 의사 결정 메서드들 중 하나입니다.
	 */
	public abstract void Corpse_Stay();

	/**
	 * 생존자 상태일 때 이번 턴에 어느 방향으로 이동할 지, 또는 그냥 제자리에 머무를 지 선택하여 return합니다.
	 * 이 메서드는 여러분이 작성해야 할 다섯 가지 의사 결정 메서드들 중 하나입니다.
	 */
	public abstract DirectionCode Infected_Move();

	/**
	 * 영혼 상태일 때 이번 턴에 그냥 하늘에 떠 있습니다.
	 * 영혼 상태일 때는 강의실 전체를 볼 수 있으므로 획득 가능한 정보의 양이 많습니다.
	 * 그러다 보니 이 메서드에 약간의 지능을 추가할 학생도 어쩌면 존재할 지도 모릅니다.
	 * 이 메서드는 여러분이 작성해야 할 다섯 가지 의사 결정 메서드들 중 하나입니다.
	 */
	public abstract void Soul_Stay();

	/**
	 * 영혼 상태일 때 이번 턴에 재배치할 좌표를 결정하여 return합니다.
	 * 이 메서드는 여러분이 작성해야 할 다섯 가지 의사 결정 메서드들 중 하나입니다.
	 */
	public abstract Point Soul_Spawn();
}

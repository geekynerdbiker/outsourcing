* 빌더패턴 / 책임연쇄패턴 / 중재자패턴 / 비지터패턴 참고 (반복자)
* 객체 생성 시 구조화(단순화), 캡슐화 고려 => 객체 합성, 조합 고려: 상호작용 및 공유되도록 기능 역할 분담 

전체적인 프로그램 작동
1. 예약하고자 하는 서비스 선택
2. 로그인하기 (* 각 서비스별로 등록 및 로그인 체계 구분)
3. 예약 진행하기 (* 모든 서비스 특정 일주일로 예약 기간 고정)
4.  if 프로그램 종료: 자동 로그아웃
    else 서비스에 재접속 - 로그인 - 예약 기록은 조회 가능(예약프로그램 자체가 종료되지 않았다면)

[Class: 전체]
- 로그인
    - 신규 고객인지 기존 고객인지: 신규 고객이면 등록할 수 있어야
    - 재접속인지 아닌지: 사용자가 프로그램 종료한 것이 아니라면 예약 기록 조회해볼 수 있어야!
- 좌석(비행기 / 식당 / 독서실)
    - 비행기: 2차원 객체 배열(날짜/시간대) 출발지/도착지 - 공항간. 왕복/편도 - 이코노미/비즈니스
    - 식당: 테이블/좌석 수. ?인용. 
    - 독서실: 15 x 15 정방형
- 통계 기능 for 고객 분석(서비스별 / 7일동안)
    - 각 서비스별 고객의 예약 정보 조회 기능 / 예약 기간은 모든 서비스는 특정 7일로 고정
    1. 고객의 지금까지의 '예약 횟수' 조회
    2. 좌석/테이블별 '예약 횟수' 조회
    3. 고객 성별 '예약 횟수' 조회
- 고객정보(성별 / 세대ID / 나이 / 마일리지 / 예약현황 // 신규.재접속 여부)

[Class: 비행기]
- 공항 간 항공편은 3개로 한정
- 출발지(국내 공항 5군데) / 도착지 지정
  왕복 / 편도 구분
  시간대 + 날짜
- 좌석: 이코노미 or 비즈니스 (* 좌석별 가격이 책정되어 있음)
    예산 범위에 따른 가능 항공 좌석 추려 보여주기 
    항공편 별 좌석 배치는 첫번째 프로그래밍 숙제의 설정과 동일
- 마일리지 (* 고객은 마일리지가 한번 예약 시 100km씩 축적됨)

[Class: 식당 1곳] => #include <que>?
- 테이블 단위 (* 테이블 수와 좌석 수 등의 설정은 자율적)
  예약자의 예약 인원에 따른 테이블의 크기를 테이블의 배정 좌석에 따라서 정할 수 있도록 함. 예약 인원이 4명인 경우, 4자리 이상의 테이블 예약
- 7세 이하 미취학 아동은 예약이 불가능함
- 테이블의 일부는 walk-in, 즉 예약 없이 방문하는 손님들을 위해서 남겨 놓음. 
Walk-in 희망자도 이 프로그램을 통해 대기를 걸어놓을 수 있음. 대기해야하는 경우는 순번을 받고 기다리도록 함.
이전 Walk-in 손님이 식사를 끝내고 나가면 대기열에 있는 손님들은 대기 순번이 하나씩 줄어듬.  

[Class: 독서실]
- 독서실 세대(아파트 커뮤니티)
- 15 x 15 정방형으로 좌석들이 배치되어 있는 독서실
- 아파트 세대별로 예약 가능
- 오전 9시부터 오후 11시 중 최대 4시간까지만 사용 가능. 4시간은 서로 갈라져있을 수 있다. 
(예컨대, 오전 9시부터 10시 1시간, 오후 17시부터 20시까지 3시간 이런 식으로 여러 시간대에 걸쳐서 합산한 예약 시간이 4시간을 넘을 수가 없다.)
- 세대는 ID가 1~300 사이로 배정
  각 세대에서 예약시에는 13세 이하는 예약 불가능
- 예약 시 성별도 명시해야 하며, 앞뒤양옆에 같은 성의 이용자를 배치 불가.
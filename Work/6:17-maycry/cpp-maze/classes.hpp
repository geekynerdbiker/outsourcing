#define indicator1 '('
#define indicator2 ')'
#define RED     "\x1b[31m"
#define YELLOW  "\x1b[33m"
#define CYAN    "\x1b[36m"
#define RESET   "\x1b[0m"
#define BOLD "\e[1;37m"
#define UNDER "\e[4;37m"

// 메이즈 클래스. 미로를 저장하고, 출력 함수가 있음
class Maze{
    protected:    
        char m[40][40]={//m[y][x]
            {' ','.','-','-','.','-','-','.','-','-','.','-','-','.','-','-','.','-','-','.', '-','.','-','-','.','-','-','.','-','-','.','-','-','.','-','-','.','-','-','.'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|', ' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':', ' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|', ' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':', ' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':'},
            {' ','|',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',' ', ' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ', ' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':', ' ',':',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|', ' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':', ' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|', ' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':', ' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|', ' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':', ' ',' ',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':'},
            {' ','|',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',' ', ' ',' ',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ', ' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',' ', ' ',' ',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|', ' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':', ' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|', ' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',' ', ' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|', ' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':', ' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':'},
            {' ','|',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', ' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',' ', ' ',' ',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|', ' ','|',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':', ' ',':',' ',' ',':','-','-',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|', ' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','|'},
            {' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':', ' ',':','-','-',':',' ',' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|', ' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|'},
            {' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':', ' ',':',' ',' ',':','-','-',':',' ',' ',':',' ',' ',':',' ',' ',':',' ',' ',':'},
            {' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|', ' ','|',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','|'},
            {' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':', ' ',':',' ',' ',':',' ',' ',':',' ',' ',':','-','-',':','-','-',':','-','-',':'},
            {' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ','|', ' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|'},
            {' ',':','-','-',':','-','-',':','-','-',':','-','-',':','-','-',':','-','-',':', '-',':','-','-',':','-','-',':','-','-',':','-','-',':','-','-',':','-','-',':'},
       };
    public:
        void printMaze(){ // 미로를 출력하는 함수
            for (int i = 0; i < 40; i++){
                for (int j = 0; j < 40; j++){
                    if (m[i][j]==indicator1 || m[i][j]==indicator2) std::cout<<BOLD<<RED<< m[i][j]<<RESET;
                    else std::cout<<CYAN<<m[i][j]<<RESET;
                }
                std::cout<<"\n";
            }
            std::cout<<"\n";
        }
};

// 메이즈 클래스를 상속받은 무브 클래스
class Move : public Maze {
    private:
    // 키 입력을 저장하기 위한 변수
        char in;
        bool msg = false, gameover=false;
        const char wall[4]={'.','|',':','-'};
    // 이동 횟수, 현재 위치를 저장하는 정적 변수
        static int count, currentX, currentY;
    // 최초 위치 좌표
        static const int  defaultY = 1, defaultX = 2;
    public:
        Move(){ // 생성자
            if (count == 0) {
                currentX=defaultX;
                currentY=defaultY;
            }

            updateLocation();
            count++; //count moves
        }

        void input(){ // w, a, s, d 키를 입력받는다.
            do{
                in=getch(); 
            }while((in!='w')&&(in!='a')&&(in!='s')&&(in!='d'));
        }

        void movement(){ // 이동 함수
            do {
                // 좌측 하단 구석에 도착하면 메이즈를 출력하고 게임 오버 상태로 전환
                if((currentY==38)&&(currentX==38)){
                    printMaze();
                    gameover=true;
                    return;
                }
                // 지도를 출력하고 입력을 받고 지도 출력
                printMaze();
                input();
                system("clear");
            } while(!isValidMove()); // 올바른 키가 입력되지 않으면 이동하지 않음
        }

        bool isValidMove(){ // 올바른 키 입력인지 확인하는 함수
            switch (in) {
                case 'w': 
                    if(moveW()) return true;
                    return false;
                case 'a':
                    if(moveA()) return true;
                    return false;
                case 's':
                    if(moveS()) return true;
                    return false;
                case 'd':
                    if(moveD()) return true;
                    return false;
            }
            return false;
        }

        bool moveW(){ // 북쪽으로 한칸 이동
            if((isWall(m[currentY-1][currentX]))||(isWall(m[currentY-1][currentX+1]))) return false;   
            currentY--;                 
            return true;
        }
        
        bool moveA(){ // 동쪽으로 한칸 이동
            if(isWall(m[currentY][currentX-1])) return false;   
            currentX--;                  
            return true;
        }
        bool moveS(){ // 남쪽으로 한칸 이동
            if((isWall(m[currentY+1][currentX]))||(isWall(m[currentY+1][currentX+1]))) return false;         
            currentY++;                 
            return true;
        }

        bool moveD(){ // 서쪽으로 한칸 이동
            if(isWall(m[currentY][currentX+2])) return false;   // 두개의 괄호로 현재 위치를 나타 내므로 2칸 확인
            currentX+=1;                  
            return true;
        }

        void updateLocation(){ // 이동 후 위치 갱신
            m[currentY][currentX]=indicator1;
            m[currentY][currentX+1]=indicator2;
        }
        bool isWall(char c){ // 매개변수로 받은 메이즈 칸이 벽인지 아닌지 반환
            for (int i = 0; i < 4; i++) if(wall[i]==c)return true;
            return false;
        }
 
        bool endGame(){return gameover;} // 게임 종료 함수
        int getCount(){return count;} // 이동 횟수 반환 함수

        char getch(){ // 엔터로 입력받는 것을 무효하기 위한 함수
            system("stty -echo"); // echo 비활성화
            system("stty cbreak"); // RAW mode 진임
            in=getchar();
            system ("stty echo"); // echo 활성화
            system("stty -cbreak");// COOKED mode 진입
            return in;
        }
};

int Move::count=-1;
int Move::currentX=Move::defaultX;
int Move::currentY=Move::defaultY;


